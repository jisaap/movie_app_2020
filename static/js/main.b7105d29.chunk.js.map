{"version":3,"sources":["components/Movie.js","components/Map.js","routes/Home.js","components/About.js","routes/Charts.js","routes/DetailView.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","latitude","longitude","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","clssName","movie","medium_cover_image","React","Component","markers","Map","navigator","geolocation","getCurrentPosition","setLocation","position","coords","script","document","createElement","async","head","appendChild","onload","kakao","maps","load","container","getElementById","option","center","LatLng","level","window","ps","services","Places","infowindow","InfoWindow","zIndex","placesSearchCB","status","pagination","Status","OK","places","listEl","menuEl","fragment","createDocumentFragment","bounds","LatLngBounds","el","hasChildNodes","removeChild","lastChild","removeAllChildNods","i","length","setMap","removeMarker","placePosition","y","x","marker","addMarker","itemEl","getListItem","extend","event","addListener","displayInfowindow","close","onmouseover","onmouseout","place_name","scrollTop","displayPlaces","ZERO_RESULT","alert","ERROR","itemStr","road_address_name","address_name","phone","innerHTML","idx","imageSize","Size","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","MarkerImage","Marker","image","push","content","setContent","open","replace","keywordSearch","searchPlaces","getLocation","size","Weather","lazy","About","charts","chart","rnum","rank","movieNm","getColor","rankInten","rate","result","getRate","fallback","getDate","Date","yDate","getTime","setTime","yYear","getFullYear","yMonth","getMonth","yDay","res","Chart","renderChart","getCharts","callApi","fetch","then","json","boxOfficeResult","dailyBoxOfficeList","catch","err","console","log","DetailView","Detail","props","location","history","undefined","Navigation","App","path","exact","component","Charts","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7105d29.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Movie.css\";\r\n\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}) {\r\n    return (\r\n    <div className=\"movie\">\r\n        <Link to= {{\r\n        pathname:`/movie/:${id}`,\r\n        state: {\r\n            year,\r\n            title,\r\n            summary,\r\n            poster,\r\n            genres\r\n            }\r\n        }}>\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\">{title}</h3>\r\n                <h5 className=\"movie_year\">{year}</h5>\r\n                <ul className=\"movie_genres\">\r\n                    {genres.map((genre, index )=> ( \r\n                    <li key={index} className=\"genres_genre\">\r\n                        {genre}\r\n                    </li>\r\n                    ))}\r\n                    </ul>\r\n                <p className=\"movie_summary\">{summary.slice(0,180)}...</p>\r\n            </div>\r\n        </Link>\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\n\r\nexport default Movie;","/*global kakao*/ \r\nimport React from \"react\";\r\n\r\n\r\nlet latitude;\r\nlet longitude;\r\nlet markers = [];\r\n\r\nclass Map extends React.Component {\r\n\r\n\r\n        state = {\r\n            isLoading: true\r\n        };\r\n            \r\n        getLocation() {\r\n            navigator.geolocation.getCurrentPosition(this.setLocation);\r\n        };\r\n        \r\n        setLocation(position) {\r\n            latitude = position.coords.latitude;\r\n            longitude = position.coords.longitude;           \r\n            const script = document.createElement('script');\r\n            script.async = true;\r\n            script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=c1fca52c08d7fa846dec749abccaebb7&autoload=false&libraries=services,clusterer,drawing'\r\n            document.head.appendChild(script);\r\n            \r\n            script.onload = () => {\r\n                kakao.maps.load(() => {\r\n                    let container = document.getElementById('map');\r\n                    let option = {\r\n                        center : new kakao.maps.LatLng(latitude, longitude),\r\n                        level : 7\r\n                    };\r\n                    let map = new window.kakao.maps.Map(container, option);      \r\n                    \r\n                    // 키워드로 검색\r\n                    // // 장소 검색 객체를 생성합니다\r\n                    let ps = new kakao.maps.services.Places();  \r\n\r\n                    // // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n                    let infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n\r\n                    // 키워드로 장소를 검색합니다\r\n                    searchPlaces();\r\n\r\n                    // 키워드 검색을 요청하는 함수입니다\r\n                    function searchPlaces() {\r\n\r\n                        var keyword = '영화관';\r\n                        if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n                            alert('키워드를 입력해주세요!');\r\n                            return false;\r\n                        }\r\n\r\n                        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n                        ps.keywordSearch(keyword , placesSearchCB); \r\n                    }\r\n\r\n                    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n                    function placesSearchCB(data, status, pagination) {\r\n                        if (status === kakao.maps.services.Status.OK) {\r\n                            // 정상적으로 검색이 완료됐으면\r\n                            // 검색 목록과 마커를 표출합니다\r\n                            displayPlaces(data);\r\n\r\n                            // 페이지 번호를 표출합니다\r\n                            // displayPagination(pagination);\r\n\r\n                        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n\r\n                            alert('검색 결과가 존재하지 않습니다.');\r\n                            return;\r\n\r\n                        } else if (status === kakao.maps.services.Status.ERROR) {\r\n\r\n                            alert('검색 결과 중 오류가 발생했습니다.');\r\n                            return;\r\n\r\n                        }\r\n                    }\r\n\r\n                    // 검색 결과 목록과 마커를 표출하는 함수입니다\r\n                    function displayPlaces(places) {\r\n\r\n                        var listEl = document.getElementById('placesList'), \r\n                        menuEl = document.getElementById('menu_wrap'),\r\n                        fragment = document.createDocumentFragment(), \r\n                        bounds = new kakao.maps.LatLngBounds();\r\n                        // listStr = '';\r\n                        \r\n                        // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n                        removeAllChildNods(listEl);\r\n\r\n                        // 지도에 표시되고 있는 마커를 제거합니다\r\n                        removeMarker();\r\n                        \r\n                        for ( var i=0; i<places.length; i++ ) {\r\n\r\n                            // 마커를 생성하고 지도에 표시합니다\r\n                            var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n                                marker = addMarker(placePosition, i), \r\n                                itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n\r\n                            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n                            // LatLngBounds 객체에 좌표를 추가합니다\r\n                            bounds.extend(placePosition);\r\n\r\n                            // 마커와 검색결과 항목에 mouseover 했을때\r\n                            // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n                            // mouseout 했을 때는 인포윈도우를 닫습니다\r\n                            (function(marker, title) {\r\n                                kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n                                    displayInfowindow(marker, title);\r\n                                });\r\n\r\n                                kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n                                    infowindow.close();\r\n                                });\r\n\r\n                                itemEl.onmouseover =  function () {\r\n                                    displayInfowindow(marker, title);\r\n                                };\r\n\r\n                                itemEl.onmouseout =  function () {\r\n                                    infowindow.close();\r\n                                };\r\n                            })(marker, places[i].place_name);\r\n\r\n                            fragment.appendChild(itemEl);\r\n                        }\r\n\r\n                        // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n                        listEl.appendChild(fragment);\r\n                        menuEl.scrollTop = 0;\r\n\r\n                        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n                        // map.setBounds(bounds);\r\n                    }\r\n\r\n                    // 검색결과 항목을 Element로 반환하는 함수입니다\r\n                    function getListItem(index, places) {\r\n\r\n                        var el = document.createElement('li'),\r\n                        itemStr = '<span className=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n                                    '<div className=\"info\">' +\r\n                                    '   <h5>' + places.place_name + '</h5>';\r\n\r\n                        if (places.road_address_name) {\r\n                            itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n                                        '   <span className=\"jibun gray\">' +  places.address_name  + '</span>';\r\n                        } else {\r\n                            itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n                        }\r\n                                    \r\n                        itemStr += '  <span className=\"tel\">' + places.phone  + '</span>' +\r\n                                    '</div>';           \r\n\r\n                        el.innerHTML = itemStr;\r\n                        el.className = 'item';\r\n\r\n                        return el;\r\n                    }\r\n\r\n                    // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n                    function addMarker(position, idx, title) {\r\n                        var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n                            imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n                            imgOptions =  {\r\n                                spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n                                spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n                                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n                            },\r\n                            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n                                marker = new kakao.maps.Marker({\r\n                                position: position, // 마커의 위치\r\n                                image: markerImage \r\n                            });\r\n\r\n                        marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n                        markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n\r\n                        return marker;\r\n                    }\r\n\r\n                    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n                    function removeMarker() {\r\n                        for ( var i = 0; i < markers.length; i++ ) {\r\n                            markers[i].setMap(null);\r\n                        }   \r\n                        markers = [];\r\n                    }\r\n\r\n                    // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n                    // function displayPagination(pagination) {\r\n                    //     var paginationEl = document.getElementById('pagination'),\r\n                    //         fragment = document.createDocumentFragment(),\r\n                    //         i; \r\n\r\n                    //     // 기존에 추가된 페이지번호를 삭제합니다\r\n                    //     while (paginationEl.hasChildNodes()) {\r\n                    //         paginationEl.removeChild (paginationEl.lastChild);\r\n                    //     }\r\n\r\n                    //     for (i=1; i<=pagination.last; i++) {\r\n                    //         var el = document.createElement('a');\r\n                    //         el.href = \"#\";\r\n                    //         el.innerHTML = i;\r\n\r\n                    //         if (i===pagination.current) {\r\n                    //             el.className = 'on';\r\n                    //         } else {\r\n                    //             el.onclick = (function(i) {\r\n                    //                 return function() {\r\n                    //                     pagination.gotoPage(i);\r\n                    //                 }\r\n                    //             })(i);\r\n                    //         }\r\n\r\n                    //         fragment.appendChild(el);\r\n                    //     }\r\n                    //     paginationEl.appendChild(fragment);\r\n                    // }\r\n\r\n                    // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n                    // 인포윈도우에 장소명을 표시합니다\r\n                    function displayInfowindow(marker, title) {\r\n                        var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n\r\n                        infowindow.setContent(content);\r\n                        infowindow.open(map, marker);\r\n                    }\r\n\r\n                    // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n                    function removeAllChildNods(el) {   \r\n                        while (el.hasChildNodes()) {\r\n                            el.removeChild (el.lastChild);\r\n                        }\r\n                    }\r\n\r\n                    // 현재 위치 마킹\r\n                    // let markerPosition  = new kakao.maps.LatLng(latitude, longitude); \r\n\r\n                    // // 마커를 생성합니다\r\n                    // let marker = new kakao.maps.Marker({\r\n                    //     position: markerPosition\r\n                    // });\r\n\r\n                    // // 마커가 지도 위에 표시되도록 설정합니다\r\n                    // marker.setMap(map);\r\n                });\r\n            }   \r\n        };\r\n\r\n            componentDidMount() {\r\n                this.getLocation();\r\n            }\r\n            render() {\r\n            return (\r\n                <div className=\"map_wrap\">\r\n                   <div id=\"map\"></div>\r\n                     <div id=\"menu_wrap\" className=\"bg_white\">\r\n                        <div className=\"option\">\r\n                                <p id=\"keyword\" size=\"15\">영화관 목록</p>\r\n                        </div>\r\n                        <hr />\r\n                        <ul id=\"placesList\"></ul>\r\n                        {/* <div id=\"pagination\"></div> */}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n    \r\n    \r\n    \r\n}\r\n\r\n\r\nexport default Map;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n  getMovies = async () => {\r\n    const {data: { data: { movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n    this.setState({movies, isLoading: false});\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getMovies();\r\n  }\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section clssName=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">Loding...</span>\r\n          </div>\r\n            ) : ( \r\n              <div className=\"movies\">\r\n                {movies.map(movie => (\r\n                 <Movie \r\n                  key={movie.id}\r\n                  id={movie.id} \r\n                  year={movie.year} \r\n                  title={movie.title} \r\n                  summary={movie.summary} \r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                  />\r\n                ))}\r\n              </div>\r\n              )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, {Suspense} from \"react\";\r\nimport Map from \"./Map.js\";\r\nimport \"./About.css\";\r\n\r\nconst Weather = React.lazy(() => \r\nimport(\"./Weather.js\"));\r\n\r\nfunction About({charts}) {\r\n    return (\r\n    <div className=\"about_container\">\r\n        <section className=\"page-content\">\r\n            <div className=\"contentContainer\">\r\n                <ul className=\"movie_charts\">\r\n                    <p>\r\n                    실시간 영화 순위\r\n                    </p>\r\n                    {charts.map((chart) => (\r\n                         <li key={chart.rnum} className=\"charts_chart\">\r\n                              {chart.rank}위 : {chart.movieNm.length > 20? chart.movieNm.slice(0,20) + \"...\" : chart.movieNm}\r\n                              \r\n                            <span className=\"chart_dec\" id={getColor(chart.rankInten)}>\r\n                                 {getRate(chart.rankInten)}\r\n                            </span>\r\n                        </li> \r\n                     ))} \r\n                     \r\n                </ul>\r\n            </div>\r\n            \r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                    <Weather />\r\n                </Suspense>\r\n        </section>\r\n            <div className=\"inputContainer\">\r\n                <Map \r\n                />\r\n            </div>\r\n        <div>\r\n            <span>Movie App Practice, 2020</span>  \r\n        </div>\r\n    </div>\r\n    );\r\n\r\n    function getRate(rate) {\r\n        let result;\r\n        if(rate > 0) {\r\n            result = \"⇑ \" +rate;\r\n        }else if(rate < 0) {\r\n            result = \"⇓ \" + rate.slice(1,3);\r\n        }else {\r\n            result = \"-\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getColor(rate) {\r\n        let result;\r\n        if(rate > 0) {\r\n            result = \"col_blu\";\r\n        }else if(rate < 0) {\r\n            result = \"col_red\";\r\n        }else {\r\n            result = \"col_gra\";\r\n        }\r\n        return result;\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport About from \"../components/About\";\r\n\r\n\r\nconst key = \"d86c591b572c801bc6dc904564731a84\";\r\n\r\nconst getDate = new Date();\r\nconst yDate = getDate.getTime(1 * 24 * 60 * 60 * 1000);\r\ngetDate.setTime(yDate);\r\nlet yYear = getDate.getFullYear();\r\nlet yMonth = getDate.getMonth() + 1;\r\nlet yDay = getDate.getDate() - 1;\r\n\r\nif(yMonth < 10) {\r\n    yMonth = \"0\" + yMonth;\r\n}\r\nif(yDay < 10) {\r\n    yDay = \"0\" + yDay;\r\n}\r\nconst resultDate = yYear + \"-\" + yMonth + \"-\" + yDay;\r\nconst res = resultDate.slice(0, 10).replace(/-/g, \"\");\r\n\r\nclass Chart extends React.Component {\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.getCharts();\r\n    }\r\n\r\n    renderChart = () => {\r\n        const {charts} = this.state;\r\n            return (\r\n                <About\r\n                    charts = {charts}\r\n                    />\r\n            );\r\n    }\r\n\r\n    getCharts = async () => {\r\n        const charts = await this.callApi();\r\n        this.setState({\r\n            charts\r\n        });\r\n    };\r\n\r\n    callApi = () => {\r\n        return fetch(\r\n            `https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=${key}&targetDt=${res}&itemPerPage=10`\r\n          )\r\n          .then(a => a.json())\r\n          .then(json => json.boxOfficeResult.dailyBoxOfficeList)\r\n          .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n        const { charts } = this.state;\r\n        return (\r\n          <div className={charts ? \"App\" : \"App-loading\"}>\r\n            {charts ? this.renderChart() : \"로딩중 ...\"}\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default Chart;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./DetailView.css\";\r\n\r\n\r\nfunction DetailView({year, title, summary, poster, genres}) {\r\n\r\n    return (\r\n        <div className=\"containerView\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movieView_data\">\r\n                <h3 className=\"movieView_title\">{title}</h3>\r\n                <h5 className=\"movieView_year\">{year}</h5>\r\n                <ul className=\"movieView_genres\">\r\n                    {genres.map((genre, index )=> ( \r\n                    <li key={index} className=\"genresView_genre\">\r\n                        {genre}\r\n                    </li>\r\n                    ))}\r\n                    </ul>\r\n                <p className=\"movieView_summary\">{summary}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nDetailView.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default DetailView;","import React from \"react\";\r\nimport DetailView from \"./DetailView\";\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if (location.state === undefined) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render() {\r\n        const { location } = this.props;\r\n        if(location.state) {\r\n            return (\r\n                <DetailView \r\n                    year={location.state.year} \r\n                    title={location.state.title} \r\n                    summary={location.state.summary} \r\n                    poster={location.state.poster}\r\n                    genres={location.state.genres}\r\n                />\r\n            );\r\n        }else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation () {\r\n    return (\r\n    <div className=\"nav\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/charts\">About</Link>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Charts from \"./routes/Charts\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n  <HashRouter>\n    <Navigation />\n    <Route path=\"/\" exact={true} component={Home} />\n    <Route path=\"/charts\" component={Charts} />\n    <Route path=\"/movie/:id\" component={Detail} />\n  </HashRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}