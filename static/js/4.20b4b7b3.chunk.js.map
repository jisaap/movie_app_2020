{"version":3,"sources":["components/Loading.js","components/WeatherView.js","components/Weather.js"],"names":["Loading","className","WeatherView","con","temp","condition","console","log","id","size","getComent","API_KEY","Weather","state","isLoading","getWeather","position","a","latitude","coords","longitude","axios","get","result","setState","data","weather","main","navigator","geolocation","getCurrentPosition","this","getLocation","Math","round","React","Component"],"mappings":"2OAUeA,MARf,WACI,OACI,yBAAKC,UAAU,WACX,4C,wCCwEGC,MA9Df,YAA2C,IA+B1BC,EA/BMC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAIzB,OAFAC,QAAQC,IAAIF,GAGR,yBAAKJ,UAAU,kBAAkBO,GAAIH,GACjC,yBAAKJ,UAAWI,GA2BV,YAFDF,EAxBQE,GA0BE,kBAAC,IAAD,CAASI,KAAK,QACtB,iBAARN,EAAuB,kBAAC,IAAD,CAAmBM,KAAK,QACxC,YAAPN,EAAiB,kBAAC,IAAD,CAAgBM,KAAK,QAC9B,SAARN,EAAe,kBAAC,IAAD,CAAaM,KAAK,QACzB,SAARN,EAAe,kBAAC,IAAD,CAAaM,KAAK,QACzB,eAARN,EAAqB,kBAAC,IAAD,CAAeM,KAAK,QACjC,UAARN,EAAgB,kBAAC,IAAD,CAAOM,KAAK,QACpB,SAARN,EAAe,kBAAC,IAAD,CAAWM,KAAK,QACvB,SAARN,EAAe,kBAAC,IAAD,CAAYM,KAAK,QACxB,SAARN,EAAe,kBAAC,IAAD,CAAQM,KAAK,QAAS,+FAlChC,4BAAKL,EAAL,UAOhB,SAAmBD,GACf,MAAe,WAAPA,EAAgB,8CAChB,iBAARA,EAAuB,6DAChB,YAAPA,EAAiB,sDACT,SAARA,EAAe,yCACP,SAARA,EAAe,kDACP,eAARA,EAAqB,wDACb,UAARA,EAAgB,oCACR,SAARA,EAAe,qDACP,SAARA,EAAe,gEACP,SAARA,EAAe,iDAA0B,mCAhB5BO,CAAUL,MClBrBM,EAAU,mCAEVC,E,4MAEFC,MAAQ,CACJC,WAAW,G,EASfC,W,uCAAa,WAAOC,GAAP,mBAAAC,EAAA,6DACTX,QAAQC,IAAIS,GACZV,QAAQC,IAAI,gBACNW,EAAWF,EAASG,OAAOD,SAC3BE,EAAYJ,EAASG,OAAOC,UAClCd,QAAQC,IAAIW,EAAUE,GALb,SAMYC,IAAMC,IAAN,6DACqCJ,EADrC,gBACqDE,EADrD,kBACwET,EADxE,kBANZ,OAMHY,EANG,OASTjB,QAAQC,IAAIgB,GACZ,EAAKC,SAAS,CACVV,WAAW,EACXT,UAAWkB,EAAOE,KAAKC,QAAQ,GAAGC,KAClCvB,KAAMmB,EAAOE,KAAKE,KAAKvB,OAblB,4C,kHAJTE,QAAQC,IAAI,gBACZqB,UAAUC,YAAYC,mBAAmBC,KAAKhB,c,0CAoB9CgB,KAAKC,gB,+BAGC,IAAD,EACkCD,KAAKlB,MAApCC,EADH,EACGA,UAAWV,EADd,EACcA,KAAMC,EADpB,EACoBA,UAEzB,OADAC,QAAQC,IAAIO,EAAWV,EAAMC,GACtBS,EACH,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAaV,KAAM6B,KAAKC,MAAM9B,GAAOC,UAAWA,Q,GAtCtC8B,IAAMC,WA4CbxB","file":"static/js/4.20b4b7b3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"loading\">\r\n            <h1>Loading...</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./WeatherView.css\";\r\nimport {WiCloud} from \"react-icons/wi\";\r\nimport {GiStoneSphere} from \"react-icons/gi\";\r\nimport {WiDayThunderstorm} from \"react-icons/wi\";\r\nimport {FiCloudDrizzle} from \"react-icons/fi\";\r\nimport {FiCloudRain} from \"react-icons/fi\";\r\nimport {FiCloudSnow} from \"react-icons/fi\";\r\nimport {FiSun} from \"react-icons/fi\";\r\nimport {WiDayHaze} from \"react-icons/wi\";\r\nimport {RiMistLine} from \"react-icons/ri\";\r\nimport {WiDust} from \"react-icons/wi\";\r\n\r\nconst weatherIcon = \"AiFillCloud\"\r\nfunction WeatherView({ temp, condition }) {\r\n    \r\n    console.log(condition);\r\n\r\n    return (\r\n        <div className=\"ratingContainer\" id={condition}>\r\n            <div className={condition} >\r\n                {getIcon(condition)}\r\n                <h2>{temp}˚</h2>\r\n                {getComent(condition)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getComent(con) {\r\n    return (con ===\"Clouds\"?<p>Moisture supply</p>:\r\n    con === \"Thunderstorm\"?<p>Actually, outside of the house</p>:\r\n    con ===\"Drizzle\"?<p>It's like rain, but gay</p>:\r\n    con === \"Rain\"?<p>It's Rain!</p>:\r\n    con === \"Snow\"?<p>Look's like Frozen!</p>:\r\n    con === \"Atmosphere\"?<p>I don't know this weather</p>:\r\n    con === \"Clear\"?<p>Nice!</p>:\r\n    con === \"Haze\"?<p>Just don't go outside.</p>:\r\n    con === \"Mist\"?<p>It's like you have no glasses on.</p>:\r\n    con === \"Dust\"?<p>Thanks a lot China</p>:<p>....</p>\r\n\r\n    );\r\n}\r\n\r\n\r\nfunction getIcon(con) {\r\n    return (\r\n           con ===\"Clouds\"?<WiCloud size=\"3em\"/>:\r\n           con === \"Thunderstorm\"?<WiDayThunderstorm size=\"3em\" />:\r\n           con ===\"Drizzle\"?<FiCloudDrizzle size=\"3em\" />:\r\n           con === \"Rain\"?<FiCloudRain size=\"3em\" />:\r\n           con === \"Snow\"?<FiCloudSnow size=\"3em\" />:\r\n           con === \"Atmosphere\"?<GiStoneSphere size=\"3em\" />:\r\n           con === \"Clear\"?<FiSun size=\"3em\" />:\r\n           con === \"Haze\"?<WiDayHaze size=\"3em\" />:\r\n           con === \"Mist\"?<RiMistLine size=\"3em\" />:\r\n           con === \"Dust\"?<WiDust size=\"3em\" />:<h1>이미지를 설정해 주세요.</h1>\r\n    );\r\n}\r\nWeatherView.propTypes = {\r\n    temp:PropTypes.number.isRequired,\r\n    condition: PropTypes.oneOf([\r\n        \"Thunderstorm\",\r\n        \"Drizzle\",\r\n        \"Rain\",\r\n        \"Snow\",\r\n        \"Atmosphere\",\r\n        \"Clear\",\r\n        \"Clouds\",\r\n        \"Haze\",\r\n        \"Mist\",\r\n        \"Dust\"\r\n    ]).isRequired\r\n}\r\n\r\n\r\nexport default WeatherView;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Loading from \"./Loading\";\r\nimport WeatherView from \"./WeatherView\";\r\n\r\n\r\nconst API_KEY = \"17e7eb67e2c598d3d738dbb0db0a289f\";\r\n\r\nclass Weather extends React.Component {\r\n    \r\n    state = {\r\n        isLoading: true\r\n    };\r\n\r\n    \r\n    getLocation() {\r\n        console.log(\"get Location\");\r\n        navigator.geolocation.getCurrentPosition(this.getWeather);\r\n    };\r\n    \r\n    getWeather = async (position) => {\r\n        console.log(position);\r\n        console.log(\"도착\");\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n        console.log(latitude, longitude);\r\n        const result = await axios.get (\r\n            `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`\r\n        );\r\n        console.log(result);\r\n        this.setState({\r\n            isLoading: false,\r\n            condition: result.data.weather[0].main,\r\n            temp: result.data.main.temp\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getLocation();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, temp, condition } = this.state\r\n        console.log(isLoading, temp, condition);\r\n        return isLoading ? (\r\n            <Loading />\r\n        ) : (\r\n            <WeatherView temp={Math.round(temp)} condition={condition} />\r\n        );\r\n    }\r\n    }\r\n\r\n\r\nexport default Weather;"],"sourceRoot":""}